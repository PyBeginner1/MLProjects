# -*- coding: utf-8 -*-
"""Predict Employee Attrition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v22t376OpkmrENztesF3VDKvNJsYfnZ6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/WA_Fn-UseC_-HR-Employee-Attrition.csv')
data

data.info()

#Statistics of the data
data.describe()

#Visualizing the employees that stayed and left
sns.countplot(data['Attrition'])

data['Attrition'].value_counts()

data.loc[data['Attrition'] == 'No']

#Show employees that stayed and left by age
fig = plt.figure(figsize=(20, 10))
sns.countplot(x = data['Age'], hue = data['Attrition'])

#Print all datatypes and their unique values
for column in data.columns:
  if data[column].dtype == object:
    print(str(column) + ' : ' + str(data[column].unique()))
    print(data[column].value_counts())
    print('-------------------------------------------------------------------------')

data.head()

#Removing useless columns
remove_col = ['EmployeeCount', 'EmployeeNumber', 'Over18', 'StandardHours']

data = data.drop(remove_col, axis = 1)
data

#Visualzie correlation
corr = data.corr()

fig = plt.figure(figsize=(20, 14))
sns.heatmap(corr,annot = True, fmt = '.0%', square = True)

#Encoding object columns
for column in data.columns:
  if data[column].dtype == np.number:
    continue
  encoder = LabelEncoder()
  data[column] = encoder.fit_transform(data[column])
  
data

#Splitting data into X & Y
X = data.drop('Attrition', axis = 1)
Y = data['Attrition']
X

Y

#train and Test split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.75, random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

model = RandomForestClassifier(n_estimators= 10, criterion = 'entropy', random_state = 1)
model.fit(X_train, Y_train)

y_pred = model.predict(X_test)
score = accuracy_score(Y_test, y_pred)
print('Test Accuracy : {:.2f}%'.format(score * 100))

score1 = model.score(X_train, Y_train)
print('Train Accuracy : {:.2f}%'.format(score1 * 100))

#Confusion matrix
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(Y_test, y_pred)

cm

